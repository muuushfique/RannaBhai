{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\holme\\\\OneDrive\\\\Documents\\\\Coding\\\\clock\\\\frontend\\\\src\\\\components\\\\Glossary.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Glossary = () => {\n  _s();\n  const [glossaryTerms, setGlossaryTerms] = useState([]); // State to store glossary terms\n  const [searchTerm, setSearchTerm] = useState(\"\"); // State to store the search term\n  const [loading, setLoading] = useState(true); // State to manage loading\n  const [error, setError] = useState(null); // State to handle errors\n\n  // Fetch glossary terms from the backend\n  useEffect(() => {\n    const fetchGlossaryTerms = async () => {\n      try {\n        console.log(\"Fetching glossary terms...\");\n        const response = await axios.get(\"http://localhost:1240/glossary\"); // Replace with your backend endpoint\n        console.log(\"Response:\", response.data);\n        setGlossaryTerms(response.data); // Set the glossary terms\n        setLoading(false); // Set loading to false after data is fetched\n      } catch (err) {\n        console.error(\"Error fetching glossary terms:\", err);\n        setError(\"Failed to fetch glossary terms. Please try again later.\");\n        setLoading(false); // Set loading to false even if there's an error\n      }\n    };\n    fetchGlossaryTerms();\n  }, []);\n  // Handle search input change\n  const handleSearchChange = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  // Filter glossary terms based on the search term\n  const filteredTerms = glossaryTerms.filter(term => term.term.toLowerCase().includes(searchTerm.toLowerCase()));\n  // Conditional rendering\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading glossary terms...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cooking Glossary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for a term...\",\n      value: searchTerm,\n      onChange: handleSearchChange,\n      style: {\n        width: \"100%\",\n        padding: \"10px\",\n        marginBottom: \"20px\",\n        fontSize: \"16px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: \"none\",\n        padding: 0\n      },\n      children: filteredTerms.map((term, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          border: \"1px solid #ccc\",\n          borderRadius: \"5px\",\n          padding: \"10px\",\n          marginBottom: \"10px\",\n          backgroundColor: term.term.toLowerCase().includes(searchTerm.toLowerCase()) ? \"#f9f9f9\" // Highlight color for matching terms\n          : \"#f9f9f9\",\n          // Default background color\n          transition: \"background-color 0.3s ease\" // Smooth transition\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: term.term\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: term.definition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Glossary, \"r0TOKjIbOJEqyTpspEB6Vx0XY9Q=\");\n_c = Glossary;\nexport default Glossary;\nvar _c;\n$RefreshReg$(_c, \"Glossary\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Glossary","_s","glossaryTerms","setGlossaryTerms","searchTerm","setSearchTerm","loading","setLoading","error","setError","fetchGlossaryTerms","console","log","response","get","data","err","handleSearchChange","e","target","value","filteredTerms","filter","term","toLowerCase","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","padding","fontFamily","type","placeholder","onChange","width","marginBottom","fontSize","listStyleType","map","index","border","borderRadius","backgroundColor","transition","definition","_c","$RefreshReg$"],"sources":["C:/Users/holme/OneDrive/Documents/Coding/clock/frontend/src/components/Glossary.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Glossary = () => {\r\n  const [glossaryTerms, setGlossaryTerms] = useState([]); // State to store glossary terms\r\n  const [searchTerm, setSearchTerm] = useState(\"\"); // State to store the search term\r\n  const [loading, setLoading] = useState(true); // State to manage loading\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch glossary terms from the backend\r\n  useEffect(() => {\r\n    const fetchGlossaryTerms = async () => {\r\n      try {\r\n        console.log(\"Fetching glossary terms...\");\r\n        const response = await axios.get(\"http://localhost:1240/glossary\"); // Replace with your backend endpoint\r\n        console.log(\"Response:\", response.data);\r\n        setGlossaryTerms(response.data); // Set the glossary terms\r\n        setLoading(false); // Set loading to false after data is fetched\r\n      } catch (err) {\r\n        console.error(\"Error fetching glossary terms:\", err);\r\n        setError(\"Failed to fetch glossary terms. Please try again later.\");\r\n        setLoading(false); // Set loading to false even if there's an error\r\n      }\r\n    };\r\n\r\n    fetchGlossaryTerms();\r\n  }, []);\r\n  // Handle search input change\r\n  const handleSearchChange = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  // Filter glossary terms based on the search term\r\n  const filteredTerms = glossaryTerms.filter((term) =>\r\n    term.term.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n  // Conditional rendering\r\n  if (loading) {\r\n    return <p>Loading glossary terms...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p style={{ color: \"red\" }}>{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", fontFamily: \"Arial, sans-serif\" }}>\r\n      <h1>Cooking Glossary</h1>\r\n      {/* Search Box */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search for a term...\"\r\n        value={searchTerm}\r\n        onChange={handleSearchChange}\r\n        style={{\r\n          width: \"100%\",\r\n          padding: \"10px\",\r\n          marginBottom: \"20px\",\r\n          fontSize: \"16px\",\r\n        }}\r\n      />\r\n\r\n      {/* Display Glossary Terms */}\r\n      <ul style={{ listStyleType: \"none\", padding: 0 }}>\r\n        {filteredTerms.map((term, index) => (\r\n          <li\r\n            key={index}\r\n            style={{\r\n              border: \"1px solid #ccc\",\r\n              borderRadius: \"5px\",\r\n              padding: \"10px\",\r\n              marginBottom: \"10px\",\r\n              backgroundColor: term.term.toLowerCase().includes(searchTerm.toLowerCase())\r\n                ? \"#f9f9f9\" // Highlight color for matching terms\r\n                : \"#f9f9f9\", // Default background color\r\n              transition: \"background-color 0.3s ease\", // Smooth transition\r\n            }}\r\n          >\r\n            <h3>{term.term}</h3>\r\n            <p>{term.definition}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Glossary;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}