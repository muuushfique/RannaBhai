{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pit\\\\Desktop\\\\RannaBhai\\\\frontend\\\\src\\\\components\\\\Glossary.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Glossary = () => {\n  _s();\n  const [glossaryTerms, setGlossaryTerms] = useState([]); // State to store glossary terms\n  const [loading, setLoading] = useState(true); // State to manage loading\n  const [error, setError] = useState(null); // State to handle errors\n\n  // Fetch glossary terms from the backend\n  useEffect(() => {\n    const fetchGlossaryTerms = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:1240/glossary\"); // Replace with your backend endpoint\n        setGlossaryTerms(response.data); // Set the glossary terms\n        setLoading(false); // Set loading to false after data is fetched\n      } catch (err) {\n        console.error(\"Error fetching glossary terms:\", err);\n        setError(\"Failed to fetch glossary terms. Please try again later.\");\n        setLoading(false); // Set loading to false even if there's an error\n      }\n    };\n    fetchGlossaryTerms();\n  }, []);\n\n  // Conditional rendering\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading glossary terms...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cooking Glossary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: \"none\",\n        padding: 0\n      },\n      children: glossaryTerms.map((term, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          border: \"1px solid #ccc\",\n          borderRadius: \"5px\",\n          padding: \"10px\",\n          marginBottom: \"10px\",\n          backgroundColor: \"#f9f9f9\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: term.term\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: term.definition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Glossary, \"TFTIW5qi0sNjou8i4MmolYSO/UE=\");\n_c = Glossary;\nexport default Glossary;\nvar _c;\n$RefreshReg$(_c, \"Glossary\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Glossary","_s","glossaryTerms","setGlossaryTerms","loading","setLoading","error","setError","fetchGlossaryTerms","response","get","data","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","padding","fontFamily","listStyleType","map","term","index","border","borderRadius","marginBottom","backgroundColor","definition","_c","$RefreshReg$"],"sources":["C:/Users/pit/Desktop/RannaBhai/frontend/src/components/Glossary.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Glossary = () => {\r\n  const [glossaryTerms, setGlossaryTerms] = useState([]); // State to store glossary terms\r\n  const [loading, setLoading] = useState(true); // State to manage loading\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch glossary terms from the backend\r\n  useEffect(() => {\r\n    const fetchGlossaryTerms = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:1240/glossary\"); // Replace with your backend endpoint\r\n        setGlossaryTerms(response.data); // Set the glossary terms\r\n        setLoading(false); // Set loading to false after data is fetched\r\n      } catch (err) {\r\n        console.error(\"Error fetching glossary terms:\", err);\r\n        setError(\"Failed to fetch glossary terms. Please try again later.\");\r\n        setLoading(false); // Set loading to false even if there's an error\r\n      }\r\n    };\r\n\r\n    fetchGlossaryTerms();\r\n  }, []);\r\n\r\n  // Conditional rendering\r\n  if (loading) {\r\n    return <p>Loading glossary terms...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p style={{ color: \"red\" }}>{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", fontFamily: \"Arial, sans-serif\" }}>\r\n      <h1>Cooking Glossary</h1>\r\n      <ul style={{ listStyleType: \"none\", padding: 0 }}>\r\n        {glossaryTerms.map((term, index) => (\r\n          <li\r\n            key={index}\r\n            style={{\r\n              border: \"1px solid #ccc\",\r\n              borderRadius: \"5px\",\r\n              padding: \"10px\",\r\n              marginBottom: \"10px\",\r\n              backgroundColor: \"#f9f9f9\",\r\n            }}\r\n          >\r\n            <h3>{term.term}</h3>\r\n            <p>{term.definition}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Glossary;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}